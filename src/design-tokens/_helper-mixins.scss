// **** Helper Mixins Collection  **** //

// Quick Padding & Margins
// Usage definition (use `null` do not fill out)
/// @example scss - scss
///   .test {
///    @include padding(top, right, bottom, left);
///    @include margin(5px, 5px, 5px, 5px);
///   }
// Padding mixin
@mixin padding($top: null, $right: null, $bottom: null, $left: null) {
  padding: $top $right $bottom $left;
}

// Margin mixin
@mixin margin($top: null, $right: null, $bottom: null, $left: null) {
  margin: $top $right $bottom $left;
}

// font
@mixin text-style($size: null, $space: null, $height: null, $weight: null) {
  font-size: $size;
  letter-spacing: $space;
  line-height: $height;
  font-weight: $weight;
}

// Quick Border
// Usage definition (use `null` do not fill out)
/// @example scss - scss
///   .test {
///    @include border(top, 1px, solid, color('primary'));
///   }
@mixin border($direction, $width, $style, $color) {
  border-#{$direction}: $width $style $color;
}

@function rem($pxValue) {
  @return #{stripUnit($pxValue) / stripUnit(size('root'))}rem;
}

// Quick Flexbox
// Usage definition (use `null` do not fill out)
/// @example scss - scss
///   .test {
///    @include flex(row, center, space-between, wrap);
///   }
@mixin flex(
  $direction: null,
  $align-items: null,
  $justify-content: null,
  $flex-wrap: null
) {
  display: flex;
  flex-flow: $direction $flex-wrap;
  align-items: $align-items;
  justify-content: $justify-content;
}

// *** Grid mixin *** //
/// Add Gap between the boxes
@function box-gap($boxes, $gap) {
  $box: ();

  @for $i from 1 through length($boxes) {
    $box: append($box, nth($boxes, $i), space);

    // Adding Gap Between
    @if $gap >= 0 {
      // Not last Loop
      @if $i != length($boxes) {
        $box: append($box, $gap, space);
      }
    }
  }

  @return $box;
}

/// To build Grid Template Columns with optional gap
/// @example scss - scss
///   .test {
///     @include grid-columns(10px 250px 1fr 50px 100px);
///   }
@mixin grid-columns($gap, $columns) {
  grid-template-columns: $columns;

  @if $gap >= 0 {
    grid-column-gap: $gap;
  }

  -ms-grid-columns: box-gap($columns, $gap);
}

/// To build Grid Template Rows with optional gap
/// @example scss - scss
///   .test {
///     @include grid-rows(10px 1fr);
///   }
@mixin grid-rows($gap, $rows) {
  grid-template-rows: $rows;

  @if $gap >= 0 {
    grid-row-gap: $gap;
  }

  -ms-grid-rows: box-gap($rows, $gap);
}

/// Generates IE10/11 grid placement to simulate grid-auto-flow.
/// @example scss -
///   .quotes {
///     @include grid-autoflow(autoflow: column, columns: 3, rows: 6, gap: both);
///   }
@mixin grid-autoflow($data) {
  $autoflow: map-get($data, autoflow);
  $columns: map-get($data, columns);
  $rows: map-get($data, rows);
  $column-gap: false;
  $row-gap: false;

  @if map-get($data, 'gap') == 'column' {
    $column-gap: true;
    $row-gap: false;
  } @else if map-get($data, gap) == 'row' {
    $column-gap: false;
    $row-gap: true;
  } @else if map-get($data, gap) == 'both' {
    $column-gap: true;
    $row-gap: true;
  } @else if map-get($data, gap) == 'neither' {
    $column-gap: false;
    $row-gap: false;
  } @else {
    @error The 'gap' argument must be one of 'column', 'row', 'both', or 'neither';
  }

  @if $column-gap {
    $columns: $columns * 2 - 1;
  }

  @if $row-gap {
    $rows: $rows * 2 - 1;
  }

  grid-auto-flow: $autoflow;

  $column: 1;
  $row: 1;
  $counter: 1;

  @if $autoflow == 'column' {
    @for $i from 1 through $columns {
      @for $j from 1 through $rows {
        // This element can be filled iff we are not in a row gap or a column gap.
        @if $i % 2 == 0 and $column-gap {
          // This is a column gap. Don't place the next element.
        } @else if $j % 2 == 0 and $row-gap {
          // This is a row gap. Don't place the next element.
        } @else {
          // Place the next element in column $i and row $j.
          :nth-child(#{$counter}) {
            grid-column: $i;
            grid-row: $j;
          }

          $counter: $counter + 1;
        }
      }
    }
  } @else if $autoflow == 'row' {
    @for $i from 1 through $rows {
      @for $j from 1 through $columns {
        // This element can be filled iff we are not in a row gap or a column gap.
        @if $i % 2 == 0 and $row-gap {
          // This is a row gap. Don't place the next element.
        } @else if $j % 2 == 0 and $column-gap {
          // This is a column gap. Don't place the next element.
        } @else {
          // Place the next element in row $i and column $j.
          :nth-child(#{$counter}) {
            grid-column: $j;
            grid-row: $i;
          }

          $counter: $counter + 1;
        }
      }
    }
  }
}

@mixin responsive-text-style($token) {
  @include use-text-style('#{$token}m');

  @include above('tablet-large') {
    @include use-text-style($token);
  }
}

@mixin float-fixed(
  $pos,
  $left: 0,
  $top: 0,
  $right: 0,
  $bottom: 0,
  $width: 100%,
  $height: 100%
) {
  position: $pos;
  left: $left;
  top: $top;
  right: $right;
  bottom: $bottom;
  width: $width;
  height: $height;
}

@mixin button-style($size) {
  $line-height: 1.6rem;
  $border-radius: 0.5rem;

  @if $size == 'large' {
    font-size: 1.6rem;
    line-height: 2rem;
    padding: 2rem 5.8rem;
    border-radius: $border-radius;
  } @else if $size == 'medium' {
    font-size: 1.4rem;
    line-height: $line-height;
    padding: 1.6rem 4.8rem;
    border-radius: $border-radius;
    letter-spacing: 0.3rem;
  } @else if $size == 'small' {
    font-size: 1.2rem;
    line-height: $line-height;
    padding: 1.2rem 2.4rem;
    border-radius: 0.3rem;
    letter-spacing: 0.15rem;
  } @else if $size == 'regular' {
    font-size: 1.4rem;
    line-height: 2.4rem;
    letter-spacing: 0.01rem;
  }
}

@mixin loader(
  $name,
  $size: 3rem,
  $color1: rgba(39, 134, 58, 0.25),
  $color2: color('green'),
  $bg: color('white')
) {
  &.#{$name}--processing {
    position: relative;

    &::after {
      content: '';

      @include float-fixed(absolute);

      background-color: $bg;
      opacity: 0.8;
    }

    &::before {
      content: '';

      @include float-fixed(absolute, 50%, 50%, null, null, $size, $size);

      transform: translate(-50%, -50%);
      border: 0.3rem solid $color1;
      border-top-color: $color2;
      border-radius: 50%;
      animation: processing 0.5s infinite linear;
      z-index: 1;
    }
  }
}

@mixin aspect-ratio($var: 'aspect-ratio') {
  &::before {
    content: '';
    display: block;
    padding-top: calc(var(--#{$var}) * 100%);
  }
}
